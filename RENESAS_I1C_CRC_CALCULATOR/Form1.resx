<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/yPBAP8iwQT/JMES/yXAGv8lwBr/JMES/yLBBP8jwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/ya7AP8muwj/J7tB/ye9jv8mvrT/Jr7R/ya+0f8mvrT/J72O/ye8Qf8mugj/JroAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/K7QA/yu0A/8r
        tBb/K7QD/yq0AP8stAD/KrQZ/ym2jv8puMD/KLqE/ye7Q/8puZr/Kbmb/ye7Q/8ouoT/KbjB/ym2jf8q
        tRn/LLUA/yq0AP8rtAP/K7QW/yu0A/8rtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8s
        sQD/LLEb/yyxsv8ssRr/LLAA/yyvGv8rsab/K7Ki/yq0Kf8trwH/LLEA/yyxhP8ssYT/LLEA/y2uAv8q
        tSn/K7Kh/yuwpv8trhr/LLAA/yyxGv8ssbL/LLEb/yyxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/y6sAP8urBv/LqvG/y+pQf8wph7/L6qR/y6soP8trhT/La0AAAAAAP8uqwD/LquE/y6rhP8u
        qwAAAAAA/y2uAP8trxT/Lqyh/y+qkP8wph7/L6lB/y6rxv8urBv/LqwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD/L6cA/y6oB/8wpnv/MaXG/zGk2P8xpM7/MaYn/zGmAAAAAAAAAAAA/zGlAP8x
        pYT/MaWE/zGlAAAAAAAAAAAA/zGmAP8xpyj/MaTO/zGk2P8xpcb/MKZ7/y6oB/8vpwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/MqEA/zKhCP8yoRz/NJ6f/zSeg/9siwD/MZ8AAAAAAAAA
        AAD/NJ8A/zSfhP80n4T/NJ8AAAAAAAAAAAD/NKEA/x0pAP8znoT/NJ6e/zKiHP8zoQj/MqEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/OZQA/zmUA/85lBb/O5IC/zaXEf83mLL/NphF/zeYAAAA
        AAAAAAAAAAAAAP83mAD/N5iE/zeYhP83mAAAAAAAAAAAAAAAAAD/NpgA/zaYRv83mLL/N5cR/zqSAv85
        lBb/OZQD/zmUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP86kQD/OpEb/zqRsv86kRn/OZEa/zmRxf85
        kif/OZEAAAAAAAAAAAAAAAAA/zmRAP85kYT/OZGE/zmRAAAAAAAAAAAAAAAAAP85kQD/OZEo/zmRxP85
        kRr/OpEZ/zqRsv86kRv/OpEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/zyMAP88jBv/PIvG/z2IQP89
        iTb/PIvL/zyLHv88iwAAAAAAAAAAAAAAAAD/PIsA/zyLhP88i4T/PIsAAAAAAAAAAAAAAAAA/zyLAP88
        ix7/PIvL/z2JNv89iED/PIvG/zyMG/88jAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/PoYA/z6HB/8+
        hXv/P4XG/z+Fz/8/hd3/P4Uc/z+FAAAAAAAAAAAAAAAAAP8/hQD/P4WE/z+FhP8/hQAAAAAAAAAAAAAA
        AAD/P4UA/z+FHP8/hd3/P4XP/z6Fxv8+hnv/QIgH/z+HAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD/P4EA/z+BB/9Aghn/QYE4/0J/zv9DfTj/RHod/0R6D/9EegAAAAAA/0J/AP9Cf4T/Qn+E/0J/AAAA
        AAD/RHoA/0R6D/9Eeh3/Q304/0J/zv9BgTj/P4MZ/z6EB/8/gwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/0Z0AP9GdAP/RnQW/0lrAf9EeBz/RHjd/0R5zv9Eecn/RHlj/0R5AAAAAAD/RHgA/0R4hP9E
        eIT/RHgAAAAAAP9EeQD/RHlj/0R5yf9Eec7/RHjd/0R4HP9JawH/RnQW/0Z0A/9GdAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD/R3EA/0dxG/9HcbL/R3EZ/0dyHP9Hcs7/R3JS/0dyOv9IcCz/SW0e/0ltD/9H
        cQD/R3KE/0dyhP9HcQD/SW0P/0ltHv9IcC3/R3I6/0dyUv9Hcs7/R3Ic/0dxGf9HcbL/R3Eb/0dxAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP9JawD/SWsb/0prxv9LaUD/S2o1/0ps4P9KbMz/SmzE/0psxf9K
        bMr/Smxj/0psAP9KbIT/SmyE/0psAP9KbGP/SmzK/0psxf9KbMT/SmzM/0ps4P9LaTX/S2lA/0prxv9J
        axv/SWsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/0xnAP9MaAf/TGZ7/0xlxv9MZc//TWXk/01lUf9N
        ZTr/TWU7/01lPP9OYyz/T18Z/01lk/9NZZP/T18Z/05jLf9NZTz/TWU7/01lOv9NZVH/TWXk/0xlz/9M
        Zcb/TGZ7/0poB/9LZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/0xhAP9MYAj/TGIZ/05gN/9P
        XuD/T1/M/1BfxP9QX8T/UF/E/09fxf9PX8b/T1/U/09f1P9PX8b/T1/F/1BfxP9QX8T/UF/E/09fzP9P
        XuD/TmA3/0xjGf9MYQj/TGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP9S
        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
        AD/8GBg//B/4P/wf+D/+P/x///////////8=
</value>
  </data>
</root>